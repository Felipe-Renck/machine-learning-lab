/**
 * ML Lab Service
 * Functionality to create and manage Lab projects, services, datasets, models, and experiments.
 *
 * OpenAPI spec version: 0.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabExperiment from '../model/LabExperiment';
import LabFileResponse from '../model/LabFileResponse';
import LabJobResponse from '../model/LabJobResponse';
import LabProjectConfig from '../model/LabProjectConfig';
import LabProjectResponse from '../model/LabProjectResponse';
import LabServiceResponse from '../model/LabServiceResponse';
import ListOfLabExperimentsResponse from '../model/ListOfLabExperimentsResponse';
import ListOfLabFilesResponse from '../model/ListOfLabFilesResponse';
import ListOfLabJobsResponse from '../model/ListOfLabJobsResponse';
import ListOfLabProjectsResponse from '../model/ListOfLabProjectsResponse';
import ListOfLabScheduledJobsResponse from '../model/ListOfLabScheduledJobsResponse';
import ListOfLabServicesResponse from '../model/ListOfLabServicesResponse';
import StatusMessageFormat from '../model/StatusMessageFormat';
import StringResponse from '../model/StringResponse';

/**
 * Projects service.
 * @module api/ProjectsApi
 * @version 0.2.0-SNAPSHOT
 */
export default class ProjectsApi {
  /**
   * Constructs a new ProjectsApi.
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createProject operation.
   * @callback module:api/ProjectsApi~createProjectCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabProjectResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabProjectResponse}
   */
  createProject(body, opts, callback) {
    opts = opts || {};
    let postBody = body;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LabProjectResponse;

    return this.apiClient.callApi(
      '/api/projects',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the createProjectToken operation.
   * @callback module:api/ProjectsApi~createProjectTokenCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get project token for the specified project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~createProjectTokenCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  createProjectToken(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/token',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteExperiment operation.
   * @callback module:api/ProjectsApi~deleteExperimentCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deletes an experiment from a specified project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteExperiment(project, experiment, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      experiment: experiment,
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/experiments',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteFile operation.
   * @callback module:api/ProjectsApi~deleteFileCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deletes a file from a specified project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteFile(project, fileKey, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      fileKey: fileKey,
      keepLatestVersions: opts['keepLatestVersions'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/files',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteJob operation.
   * @callback module:api/ProjectsApi~deleteJobCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deletes a job from a project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteJob(project, job, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      job: job,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs/{job}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteProject operation.
   * @callback module:api/ProjectsApi~deleteProjectCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete a project and all its associated networks, services &amp; data.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteProject(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteScheduledJob operation.
   * @callback module:api/ProjectsApi~deleteScheduledJobCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Remove a scheduled job.
   * @param {module:api/ProjectsApi~deleteScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteScheduledJob(project, job, callback) {
    let postBody = null;

    let pathParams = {
      project: project,
      job: job,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs/scheduled/{job}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteService operation.
   * @callback module:api/ProjectsApi~deleteServiceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete a specific project service by name or type.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteService(project, service, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      service: service,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/services/{service}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deployJob operation.
   * @callback module:api/ProjectsApi~deployJobCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabJobResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deploy a job for a specified project based on a provided image.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deployJobCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabJobResponse}
   */
  deployJob(project, image, opts, callback) {
    opts = opts || {};
    let postBody = opts['body'];

    let pathParams = {
      project: project,
    };
    let queryParams = {
      image: image,
      schedule: opts['schedule'],
      name: opts['name'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LabJobResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deployModel operation.
   * @callback module:api/ProjectsApi~deployModelCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabServiceResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deploy a model as a service for a specified project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deployModelCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabServiceResponse}
   */
  deployModel(project, fileKey, opts, callback) {
    opts = opts || {};
    let postBody = opts['body'];

    let pathParams = {
      project: project,
    };
    let queryParams = {
      fileKey: fileKey,
      name: opts['name'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LabServiceResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/files/models/deploy',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deployService operation.
   * @callback module:api/ProjectsApi~deployServiceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabServiceResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deploy a service for a specified project based on a provided image.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~deployServiceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabServiceResponse}
   */
  deployService(project, image, opts, callback) {
    opts = opts || {};
    let postBody = opts['body'];

    let pathParams = {
      project: project,
    };
    let queryParams = {
      image: image,
      name: opts['name'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LabServiceResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/services',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the downloadFile operation.
   * @callback module:api/ProjectsApi~downloadFileCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Download file from remote storage of selected project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
   */
  downloadFile(project, fileKey, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      fileKey: fileKey,
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/api/projects/{project}/files/download',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getExperiments operation.
   * @callback module:api/ProjectsApi~getExperimentsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabExperimentsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all experiments of a project with details.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabExperimentsResponse}
   */
  getExperiments(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabExperimentsResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/experiments',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getFileInfo operation.
   * @callback module:api/ProjectsApi~getFileInfoCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabFileResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get info about the specified file.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getFileInfoCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabFileResponse}
   */
  getFileInfo(project, fileKey, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      fileKey: fileKey,
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabFileResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/files/info',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getFiles operation.
   * @callback module:api/ProjectsApi~getFilesCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabFilesResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all files of a project with details and general statistics filtered by data type and/or prefix.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabFilesResponse}
   */
  getFiles(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      dataType: opts['dataType'],
      prefix: opts['prefix'],
      aggregateVersions: opts['aggregateVersions'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabFilesResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/files',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getJob operation.
   * @callback module:api/ProjectsApi~getJobCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabJobResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a specific project job by name or type.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabJobResponse}
   */
  getJob(project, job, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      job: job,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabJobResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs/{job}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getJobLogs operation.
   * @callback module:api/ProjectsApi~getJobLogsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the logs for a job.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getJobLogsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  getJobLogs(project, job, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      job: job,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs/{job}/logs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getJobs operation.
   * @callback module:api/ProjectsApi~getJobsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabJobsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all jobs of a project with details and general statistics.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabJobsResponse}
   */
  getJobs(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabJobsResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getProject operation.
   * @callback module:api/ProjectsApi~getProjectCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabProjectResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get details for the specified project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabProjectResponse}
   */
  getProject(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      expand: opts['expand'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabProjectResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getProjects operation.
   * @callback module:api/ProjectsApi~getProjectsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabProjectsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all available projects with details.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabProjectsResponse}
   */
  getProjects(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabProjectsResponse;

    return this.apiClient.callApi(
      '/api/projects',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getScheduledJobs operation.
   * @callback module:api/ProjectsApi~getScheduledJobsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabScheduledJobsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all scheduled jobs of a project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getScheduledJobsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabScheduledJobsResponse}
   */
  getScheduledJobs(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabScheduledJobsResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/jobs/scheduled',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getService operation.
   * @callback module:api/ProjectsApi~getServiceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabServiceResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a specific project service by name or type.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabServiceResponse}
   */
  getService(project, service, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      service: service,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabServiceResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/services/{service}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getServiceLogs operation.
   * @callback module:api/ProjectsApi~getServiceLogsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the logs for a service.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getServiceLogsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  getServiceLogs(project, service, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
      service: service,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/services/{service}/logs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getServices operation.
   * @callback module:api/ProjectsApi~getServicesCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabServicesResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all services of a project with details and general statistics.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabServicesResponse}
   */
  getServices(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabServicesResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/services',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the isProjectAvailable operation.
   * @callback module:api/ProjectsApi~isProjectAvailableCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Checks if a project name is available for project creation .
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~isProjectAvailableCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  isProjectAvailable(project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/projects/{project}/available',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the syncExperiment operation.
   * @callback module:api/ProjectsApi~syncExperimentCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Sync an experiment to the experiments DB of a project.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~syncExperimentCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  syncExperiment(body, project, opts, callback) {
    opts = opts || {};
    let postBody = body;

    let pathParams = {
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/experiments',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the uploadFile operation.
   * @callback module:api/ProjectsApi~uploadFileCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Upload file to remote storage of selected project and returns key.
   * @param {Object} opts Optional parameters
   * @param {module:api/ProjectsApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  uploadFile(file, project, dataType, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      project: project,
    };
    let queryParams = {
      dataType: dataType,
      fileName: opts['fileName'],
      versioning: opts['versioning'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {
      file: file,
    };

    let authNames = [];
    let contentTypes = ['multipart/form-data'];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/projects/{project}/files/upload',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
