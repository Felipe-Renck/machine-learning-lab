/**
 * ML Lab Service
 * Functionality to create and manage Lab projects, services, datasets, models, and experiments.
 *
 * OpenAPI spec version: 0.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BooleanResponse from '../model/BooleanResponse';
import LabUserResponse from '../model/LabUserResponse';
import ListOfLabUsersResponse from '../model/ListOfLabUsersResponse';
import StatusMessageFormat from '../model/StatusMessageFormat';
import StringResponse from '../model/StringResponse';

/**
 * Authorization service.
 * @module api/AuthorizationApi
 * @version 0.2.0-SNAPSHOT
 */
export default class AuthorizationApi {
  /**
   * Constructs a new AuthorizationApi.
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the addUserToProject operation.
   * @callback module:api/AuthorizationApi~addUserToProjectCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Add a user to a project. Return new token.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~addUserToProjectCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  addUserToProject(user, project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}/projects/{project}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the createApiToken operation.
   * @callback module:api/AuthorizationApi~createApiTokenCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a long-term API token for given user.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~createApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  createApiToken(user, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}/token',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the createUser operation.
   * @callback module:api/AuthorizationApi~createUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabUserResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create user profile.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabUserResponse}
   */
  createUser(user, password, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      user: user,
      password: password,
      admin: opts['admin'],
      jwtSecret: opts['jwtSecret'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabUserResponse;

    return this.apiClient.callApi(
      '/api/auth/users',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deactivateUsers operation.
   * @callback module:api/AuthorizationApi~deactivateUsersCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deactivate a list of users. This will overwrite all deactivated users (admin only).
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~deactivateUsersCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deactivateUsers(body, opts, callback) {
    opts = opts || {};
    let postBody = body;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['*/*'];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/auth/users/deactivate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteUser operation.
   * @callback module:api/AuthorizationApi~deleteUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StatusMessageFormat} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete a user (admin only).
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StatusMessageFormat}
   */
  deleteUser(user, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StatusMessageFormat;

    return this.apiClient.callApi(
      '/api/auth/users/{user}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getMe operation.
   * @callback module:api/AuthorizationApi~getMeCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabUserResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the user profile of the current user.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabUserResponse}
   */
  getMe(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabUserResponse;

    return this.apiClient.callApi(
      '/api/auth/users/me',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getUser operation.
   * @callback module:api/AuthorizationApi~getUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LabUserResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the profile a user has access to.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LabUserResponse}
   */
  getUser(user, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LabUserResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getUsers operation.
   * @callback module:api/AuthorizationApi~getUsersCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfLabUsersResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get all profiles stored in the database (admin only).
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfLabUsersResponse}
   */
  getUsers(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfLabUsersResponse;

    return this.apiClient.callApi(
      '/api/auth/users',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the loginUser operation.
   * @callback module:api/AuthorizationApi~loginUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Login with basic auth and get short-term application token (JWT).
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  loginUser(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/login',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the logoutUser operation.
   * @callback module:api/AuthorizationApi~logoutUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Log the user out by setting the auth cookie to a time in the past
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  logoutUser(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/logout',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the oidcEnabled operation.
   * @callback module:api/AuthorizationApi~oidcEnabledCallback
   * @param {String} error Error message, if any.
   * @param {module:model/BooleanResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Check if external OIDC authentication is enabled
   * @param {module:api/AuthorizationApi~oidcEnabledCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/BooleanResponse}
   */
  oidcEnabled(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = BooleanResponse;

    return this.apiClient.callApi(
      '/api/auth/oidc/enabled',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the oidcLogin operation.
   * @callback module:api/AuthorizationApi~oidcLoginCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Redirects the client to the configured external OIDC endpoint with the correct callback url.
   * @param {module:api/AuthorizationApi~oidcLoginCallback} callback The callback function, accepting three arguments: error, data, response
   */
  oidcLogin(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/api/auth/oidc/login',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the oidcLoginCallback operation.
   * @callback module:api/AuthorizationApi~oidcLoginCallbackCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Callback which will be called with the authentication code by the external OIDC provider. The code is used to retrieve the user&#x27;s e-mail, then the login is performed and the client is redirected to the main page.
   * @param {module:api/AuthorizationApi~oidcLoginCallbackCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  oidcLoginCallback(code, callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      code: code,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/oidc/callback',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the refreshToken operation.
   * @callback module:api/AuthorizationApi~refreshTokenCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a new short-term application token (JWT).
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  refreshToken(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['text/plain'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/refresh',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the removeUserFromProject operation.
   * @callback module:api/AuthorizationApi~removeUserFromProjectCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Remove a user from a project. Return new token.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~removeUserFromProjectCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  removeUserFromProject(user, project, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
      project: project,
    };
    let queryParams = {};
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}/projects/{project}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the updatePermissions operation.
   * @callback module:api/AuthorizationApi~updatePermissionsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update permissions of a user (admin only). Return new token.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~updatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  updatePermissions(body, user, opts, callback) {
    opts = opts || {};
    let postBody = body;

    let pathParams = {
      user: user,
    };
    let queryParams = {
      deactivateToken: opts['deactivateToken'],
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}/permissions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the updateUserPassword operation.
   * @callback module:api/AuthorizationApi~updateUserPasswordCallback
   * @param {String} error Error message, if any.
   * @param {module:model/StringResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update user password. Return new token.
   * @param {Object} opts Optional parameters
   * @param {module:api/AuthorizationApi~updateUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/StringResponse}
   */
  updateUserPassword(user, password, opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {
      user: user,
    };
    let queryParams = {
      password: password,
    };
    let headerParams = {
      authorization: opts['authorization'],
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = StringResponse;

    return this.apiClient.callApi(
      '/api/auth/users/{user}/password',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
