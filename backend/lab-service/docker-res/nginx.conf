# NOTE: run.py modifies the nginx configuration, for example substituting variables such as $LAB_BASE_URL! Check it out in for more details / insights.

# Log errors to stdout
error_log /dev/stdout warn;

# Give nginx access to the JWT_SECRET environment variable,
# which is needed by the jwt-lua script to verify the JWT signature
env JWT_SECRET;

events {}
http {
    # if SERVICE_SSL_ENABLED flag is set, following lines are commented in and the path to the certs is set
    #ssl_certificate
    #ssl_certificate_key
    log_format nginx '$remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent $request_length $request_time $upstream_response_time '
                 '"$http_referer" "$http_user_agent"';
    access_log /resources/nginx/logs/host.access.log nginx;

    lua_package_path "/resources/nginx_plugins/jwt_auth/?.lua;/resources/nginx_plugins/lua-resty-http/?.lua;;";
    # error_log /resources/nginx/logs/error.log warn; # to see DEBUG logs, change 'warn' to 'debug'

    client_max_body_size 1G;
    client_body_timeout 300s;
    client_header_timeout 120s;

    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # server that listens on http and not on https.
    server {
        listen 127.0.0.1:7091; # only listen on localhost

        location = /ping {
            auth_basic off;
            return 200;
        }
     }

    server {
        listen 8091;#ssl
        
        error_page 502 504 /5xx.html;
        error_page 401 /401.html;
        # Website was accessed via http, redirect to https:
        error_page 497 https://$http_host$request_uri;

        #auth_basic "Restricted Access";
        #auth_basic_user_file /etc/nginx/.htpasswd;
        
        # variables modified during run.py-execution

        set $lab_namespace lab; # the lab_namespace will be modified in the run.py
        set $service_suffix ''; # used to resolve services correctly; in Kubernetes, the full-qualified name has to be given. It includes the cluster namespace
        set $admin $lab_namespace-service-admin$service_suffix:9000;

        location = {LAB_BASE_URL}/5xx.html {
            root /resources/;
            rewrite ^{LAB_BASE_URL}(.*) $1 break;
            internal;
        }

        location = {LAB_BASE_URL}/401.html {
            root /resources/;
            rewrite ^{LAB_BASE_URL}(.*) $1 break;
            internal;
        }

        location {LAB_BASE_URL}/ {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            proxy_hide_header Access-Control-Allow-Origin; # hide the Access-Control-Allow-Origin header sent from the server, as it is set by nginx
            proxy_hide_header WWW-Authenticate;
            proxy_buffering off;
            proxy_set_header Host $http_host;
            proxy_pass http://localhost:8090;
        }

        location {LAB_BASE_URL}/app/lab {
            rewrite ^({LAB_BASE_URL})/app/lab(.*)$ $1/lab$2 last;
        }

        location ~* {LAB_BASE_URL}/api/.*files/upload {
            client_max_body_size 100G;
            client_body_timeout 600s;

            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";
            proxy_hide_header Access-Control-Allow-Origin; # hide the Access-Control-Allow-Origin header sent from the server, as it is set by nginx
            proxy_buffering off;
            proxy_set_header Host $http_host;
            proxy_pass http://localhost:8090;
        }

        location = {LAB_BASE_URL}/app {
            return 301 $scheme://$http_host$request_uri/;
        }

        location = {LAB_BASE_URL}/healthy {
            auth_basic off;
            return 200;
        }

        location = {LAB_BASE_URL}/ping {
            auth_basic off;
            return 200;
        }

        # returns the name of the container which responded. Enable testing whether requests are distributed among scaled containers
        location = {LAB_BASE_URL}/hostinfo {
            add_header Content-Type text/plain;
            return 200 $hostname;
        }

        # Service Admin / Portainer
        ## add a trailing slash to the request
        location = {LAB_BASE_URL}/service-admin {
            return 301 $scheme://$http_host$request_uri/;
        }

        location {LAB_BASE_URL}/service-admin/ {
            resolver 127.0.0.11; # use Docker's DNS entries

            access_by_lua_block {
               ngx.log(ngx.DEBUG, ngx.var.http_Authorization)
               local jwt = require("nginx-jwt")
               jwt.auth({
                  ["$int_perms"]=function (val, jwt_obj)
                    if (jwt_obj.payload["tokenType"] ~= "shortTerm") then
                        ngx.status = 403
                        ngx.say("API tokens are not allowed to access service-admin")
                        ngx.exit(403)
                    end
                    return jwt.table_contains(jwt_obj.payload["$int_perms"], "admin")
                  end
               })
            }

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_hide_header X-Frame-Options; # Portainer does not allow framing by default, so we hide this header to the browser
            rewrite ^{LAB_BASE_URL}/service-admin(/.*)$ $1 break; # remove first part of url so that it is not further tunneled to portainer
            proxy_pass http://$admin;
        }

        location ~* ^{LAB_BASE_URL}/service-admin/api/websocket/(?<remaining_part>.*) {
            resolver 127.0.0.11; # use Docker's DNS entries
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_http_version 1.1;
            proxy_pass http://$admin/api/websocket/$remaining_part$is_args$args;
        }

        # workspace
        # shared access - authentication happens on workspace side
        location ~* ^{LAB_BASE_URL}/workspace/id/(?<id>([a-zA-Z0-9\-]+))/shared/ {
            resolver 127.0.0.11; # use Docker's DNS entries

            # increase buffer size so that smaller requests/responses are not buffered to a temp file (should increase speed)
            proxy_buffers 16 16k;  
            proxy_buffer_size 16k;
            # increase buffer size of what a client can send. Otherwise, a lot of "a client request body is buffered to a temporary file" logs come up
            # 10M is chosen arbitrarily.
            client_body_buffer_size 10M;

            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            default_type text/html; # if no Content-Type header is set, assume it is html (needed for Ungit)

            proxy_pass http://$lab_namespace-workspace-$id$service_suffix:8091;
        }

        # authenticate via jwt
        location ~* ^{LAB_BASE_URL}/workspace(/id/(?<id>([a-zA-Z0-9\-]+))/)?(tools/)? {
            resolver 127.0.0.11; # use Docker's DNS entries

            # increase buffer size so that smaller requests/responses are not buffered to a temp file (should increase speed)
            proxy_buffers 16 16k;  
            proxy_buffer_size 16k;
            # increase buffer size of what a client can send. Otherwise, a lot of "a client request body is buffered to a temporary file" logs come up
            # 10M is chosen arbitrarily.
            client_body_buffer_size 10M;

            access_by_lua_block {
                local jwt = require("nginx-jwt")

                -- authenticate the user. allow passing if the requested id corresponds to the id in the jwt token or if the jwt token has admin permissions
                jwt.auth({
                    ["username"]=function (val, jwt_obj)
                            if (ngx.var.id == '') then
                                ngx.var.id = val:lower() --use the username of the JWT token to route to the correct container. No one can temper it as then the JWT token is invalid
                            
                                --if the url misses the /id part, set it based on the username within the jwt token so that all tools within the workspace are routed correctly as well (they usually request /workspace/tools/ -> /workspace/id/<user>/tools)
                                if (ngx.var.uri == '{LAB_BASE_URL}/workspace' or ngx.var.uri == '{LAB_BASE_URL}/workspace/') then
                                    ngx.req.set_uri("{LAB_BASE_URL}/workspace/id/" .. ngx.var.id)
                                end
                            end

                            if (jwt_obj.payload["tokenType"] ~= "shortTerm") then
                                ngx.status = 403
                                ngx.say("API tokens are not allowed to access workspace")
                                ngx.exit(403)
                            end

                            -- val correspondes to the value of the jwt of field 'username' - case insensitive
                            return (val:lower() == ngx.var.id:lower() or jwt.table_contains(jwt_obj.payload["$int_perms"], "admin"))
                        end
                })

                local http = require "resty.http"
                local http_connection = http.new()
                -- check whether container does exist to directly route to it.
                -- if the container does not exist, call the /check endpoint from the Lab to load it
                local res, error = http_connection:request_uri("http://" .. ngx.var.lab_namespace .. "-workspace-" .. ngx.var.id .. ngx.var.service_suffix .. ":8091/ping", {method = "GET"})
                if error ~= nil or res == nil or res.status ~= 200 then
                    local res, error  = http_connection:request_uri("http://127.0.0.1:8090{LAB_BASE_URL}/api/admin/workspace/check?id=" .. ngx.var.id, {
                        method = "GET",
                        headers = {
                            ["Authorization"] = jwt.get_token(),
                        },
                    })

                    if error ~= nil or res == nil or res.status ~= 200 then
                        ngx.log(ngx.ERR, "Request to check research container 'workspace-" .. ngx.var.id .. "' failed.")
                    end
                
                    ngx.exec("{LAB_BASE_URL}/5xx.html")
                end
                ngx.log(ngx.DEBUG, "Checked availability of research-workspace")
            }

            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            default_type text/html; # if no Content-Type header is set, assume it is html (needed for Ungit)

            proxy_pass http://$lab_namespace-workspace-$id$service_suffix:8091;
        }

        # all-services (admin-only)
        location ~* ^{LAB_BASE_URL}/services/(?<service>[a-zA-Z0-9.\-]+)/(?<access_port>[0-9]+)/(?<remaining_part>.*) {
            resolver 127.0.0.11; # use Docker's DNS entries

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            access_by_lua_block {
               ngx.log(ngx.DEBUG, ngx.var.http_Authorization)
               local jwt = require("nginx-jwt")
               jwt.auth({
                  ["$int_perms"]=function (val, jwt_obj)
                    if (jwt_obj.payload["tokenType"] ~= "shortTerm") then
                        ngx.status = 403
                        ngx.say("API tokens are not allowed to access service-admin")
                        ngx.exit(403)
                    end
                    return jwt.table_contains(jwt_obj.payload["$int_perms"], "admin")
                  end
               })
            }

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            proxy_pass http://$service:$access_port/$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

        # project-services - swagger.json special matching - mainly copied from part below
        location ~* ^{LAB_BASE_URL}/api/projects/(?<project>[a-zA-Z0-9\-]+)/services/(?<service>[a-zA-Z0-9\-]+)/(?<access_port>[0-9]+)(.*)swagger.json {
            resolver 127.0.0.11; # use Docker's DNS entries

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            access_by_lua_block {
                -- TODO only allow access with project in service name - does this restirction make sense?
                if not string.find(string.lower(ngx.var.service), string.lower(ngx.var.project), 1, true) then
                    ngx.log(ngx.STDERR, "User is not allowed to access " .. ngx.var.service .. ". Not a service of project " .. ngx.var.project)
                    ngx.exit(ngx.HTTP_FORBIDDEN) -- prevent this endpoint tunneling ml lab core services to be tunneled to the outside
                end

                local jwt = require("nginx-jwt")

                jwt.auth({
                    ["$int_perms"]=jwt.lab_utils.isProjectMemberOrAdmin(string.lower(ngx.var.project))
                })
            }

            # sub_filter added to serve Swagger behind proxy
            sub_filter '"swagger" : "2.0",' '"swagger" : "2.0", "basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"swagger":"2.0"' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/", "swagger" : "2.0"';
            sub_filter '"basePath": "",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"basePath": ".",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"basePath" : "",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"basePath" : ".",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"basePath":"",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter '"basePath":".",' '"basePath": "{LAB_BASE_URL}/api/projects/$project/services/$service/$access_port/",';
            sub_filter_once on;
            sub_filter_types text/plain application/json;

            rewrite {LAB_BASE_URL}/api/projects/(?<project>[a-zA-Z0-9\-]+)/services/(?<service>[a-zA-Z0-9\-]+)/(?<access_port>[0-9]+)/?(?<remaining_part>.*) /$remaining_part break;

            proxy_pass http://$service$service_suffix:$access_port;
        }

        # project-services
        location ~* ^{LAB_BASE_URL}/api/projects/(?<project>[a-zA-Z0-9\-]+)/services/(?<service>[a-zA-Z0-9\-]+)/(?<access_port>[0-9]+) {
            resolver 127.0.0.11; # use Docker's DNS entries

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            access_by_lua_block {
                -- TODO only allow access with project in service name - does this restirction make sense?
                if not string.find(string.lower(ngx.var.service), string.lower(ngx.var.project), 1, true) then
                    ngx.log(ngx.STDERR, "User is not allowed to access " .. ngx.var.service .. ". Not a service of project " .. ngx.var.project)
                    ngx.exit(ngx.HTTP_FORBIDDEN) -- prevent this endpoint tunneling ml lab core services to be tunneled to the outside
                end

                local jwt = require("nginx-jwt")

                jwt.auth({
                    ["$int_perms"]=jwt.lab_utils.isProjectMemberOrAdmin(string.lower(ngx.var.project))
                })
            }

            rewrite {LAB_BASE_URL}/api/projects/(?<project>[a-zA-Z0-9\-]+)/services/(?<service>[a-zA-Z0-9\-]+)/(?<access_port>[0-9]+)/?(?<remaining_part>.*) /$remaining_part break;

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            proxy_pass http://$service$service_suffix:$access_port;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }
    }
}

# Distribute incoming requests based on the ssl_preread_protocol header
stream {
    upstream ssh {
      server 127.0.0.1:22;
    }

    upstream web {
        # This whole stream directive is only used when HTTPS is activated 
        # as the listen ports in run.py are switched. When the ports are switched, this web directive will stream to the 
        # right port as the main nginx block listens on 8092 then whereas this stream block listens on 8091.
      server 127.0.0.1:8092;
    }

    map $ssl_preread_protocol $upstream {
         "" ssh;
         default web;
    }

    # SSH and SSL on the same port
    # in run.py the ports 8092 and 8091 of the listen directives will be switched if Lab was started with ssl enabled
    server {
        listen 8092;

        proxy_pass $upstream;
        ssl_preread on;
    }
}
